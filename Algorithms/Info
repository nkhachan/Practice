Dynamic Programming : Storing values so that computations can be reused

Tabulation : Bottom Up
Memoization: Top Down

Ex :

// Computing fibonacci sequence.
fib (n){
  if (n == 1){
    return 1;
  } else if (n == 0){
    return 0;
  } else {
    return fib(n-1)*fib(n-2);
  }
}

Terrible runtime since:

                                         fib(5)
                              fib(4)               fib(3)
                        fib (3)              fib(2)    fib(1)
                  fib (2)     fib (1)   fib(1)   fib(1)
            fib (1)  fib (0)

makes a tree where fib (1) is called multiple times for no reason.

Memoization : Store intermediate results to ensure better runtime.

Ex :

// Computing fibonacci sequence and storing results each time
fib (n, memo) {
  if (n == 1){
    return 1;
  } else if (n == 0){
    return 0;
  else if (!memo[n]){
    memo[n] = fib(n-1, memo)*fib(n-2, memo);
  }
  return memo[n];
}

introduce non-incrementing variable
